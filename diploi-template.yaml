diploiTemplateVersion: V1.0
name: diploi-nextjs-template
description: NextJS template for Diploi

stages:
  - name: Production
    identifier: production
  - name: Staging
    identifier: staging
  - name: Development
    identifier: development

contexts:
  - name: app
    identifier: app
  - name: redis
    identifier: redisdiploi

parameterGroups:
  - name: MySQL Database
    identifier: mysql
    toggleable: true
    parameters:
      - name: Host
        identifier: DB_HOST
        defaultValue: mysql.example.com
        type: string
      - name: Password
        identifier: DB_PASSWORD
        defaultValue: ''
        type: secret
  - name: Servers
    identifier: SERVER
    parameters:
      - name: Server count
        identifier: SERVER_REPLICAS
        defaultValue: 2
        type: integer
        stages:
          - production

environmentVariables:
  - identifier: PROJECT_TITLE
    defaultValue: ProjectTitleDefaultFromTemplate
    type: string
    contexts: label=app
  - identifier: SOME_OTHER_SETTING
    defaultValue: asdasd
    type: string
    contexts: label=app

repositories:
  - name: web
    identifier: web
    exampleProjectUrl: https://github.com/NemesysLtd/diploi-node-sample #optional

hosts:
  - name: App
    identifier: app
    urlFormat: 'www-[label].[default-domain]'

ssh:
  - usernameFormat: '[label]'
    contexts: label=app
    stages:
      - development
  - usernameFormat: '[label]-[index]'
    contexts: label=app
    stages:
      - production
  - usernameFormat: '[label]-redis'
    contexts: label=redis

logs:
  - name: Pod Log
    contexts: label=app
  - name: API Log
    contexts: label=app
    command: tail --lines 2000 -f /var/log/api.log
  - name: API Error Log
    contexts: label=app
    command: tail --lines 2000 -f /var/log/api.log | grep Fatal

actions:
  - identifier: server-restart
    name: Restart servers
    labelSelector: app=app
    command: npm run restart
  - identifier: packages-reinstall
    name: Reinstall packages
    labelSelector: app=app
    command: npm run clean
  - identifier: ping
    name: Ping
    labelSelector: app=app
    command: echo "Pong"
  - identifier: log-test-read
    name: Log test read
    labelSelector: app
    command: tail -F -n 2000 /var/log/test.log
  - identifier: log-test-write
    name: Log test write
    labelSelector: app
    command: echo "$(date)\n" > /var/log/test.log

images:
  - identifier: app
    repository: web
    baseImageDockerfile: DockerfileBase
    dockerfile: Dockerfile
    buildStages:
      - production
      - staging
    stages: 
      - development
      - production
      - staging

storage:
  - identifier: app
    stages: 
      - development
    sizeMb: 8000 
  - identifier: rootpersist
    stages: 
      - development
    sizeMb: 1000 
